<?xml version="1.0"?>
<doc>
    <assembly>
        <name>API</name>
    </assembly>
    <members>
        <member name="T:API.Controllers.BooksController">
            <summary>
            Class BooksController.
            Implements Books API
            </summary>
        </member>
        <member name="F:API.Controllers.BooksController._mediator">
            <summary>
            IMediator
            </summary>
        </member>
        <member name="M:API.Controllers.BooksController.#ctor(MediatR.IMediator,Persistence.DataContext)">
            <summary>
            Constructor
            </summary>
            <param name="mediator">mediator</param>
            <param name="context">context</param>
        </member>
        <member name="M:API.Controllers.BooksController.List">
            <summary>
            Method retrieves all the books.
            GET: /api/books
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.BooksController.Details(System.Guid)">
            <summary>
            Method retrieves the specific book.
            GET: /api/books/id
            </summary>
            <param name="id">id</param>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.BooksController.Create(Application.Books.Create.Command)">
            <summary>
            Method creates a book.
            POST: /api/books/
            </summary>
            <param name="command">command</param>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.BooksController.Edit(System.Guid,Application.Books.Edit.Command)">
            <summary>
            Method updates the book.
            PUT: /api/books/id
            </summary>
            <param name="id">id</param>
            <param name="command">command</param>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.BooksController.Delete(System.Guid)">
            <summary>
            Method updates the book.
            DELETE: /api/books/id
            </summary>
            <param name="id">id</param>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.BooksController.ListSubmissionsForBook(System.Guid)">
            <summary>
            Method fetches all the submissions for the specific id.
            GET: api/books/{bookId}/submissions
            </summary>
            <param name="bookId"></param>
            <returns></returns>
        </member>
        <member name="T:API.Controllers.SubmissionsController">
            <summary>
            Class BooksController.
            Implements Submissions API
            </summary>
        </member>
        <member name="F:API.Controllers.SubmissionsController._ctx">
            <summary>
            Context
            </summary>
        </member>
        <member name="M:API.Controllers.SubmissionsController.#ctor(Persistence.DataContext)">
            <summary>
            Constructor
            </summary>
            <param name="ctx">context</param>
        </member>
        <member name="M:API.Controllers.SubmissionsController.All">
            <summary>
            Method retrieves all the submissions.
            GET: /api/submissions
            </summary>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.SubmissionsController.Get(System.Guid)">
            <summary>
            Method retrieves the specific submission.
            GET: /api/submissions/{id}
            </summary>
            <param name="id">id</param>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.SubmissionsController.Create(Domain.Submission)">
            <summary>
            Method creates a submission.
            POST: /api/submissions
            </summary>
            <param name="submission">submission</param>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.SubmissionsController.Update(Domain.Submission)">
            <summary>
            Method updates the submission.
            PUT: /api/submissions
            </summary>
            <param name="submission">submission</param>
            <returns>JSON</returns>
        </member>
        <member name="M:API.Controllers.SubmissionsController.Delete(System.Int32)">
            <summary>
            Method deletes the submission.
            DELETE: /api/submissions/id
            </summary>
            <param name="id">id</param>
            <returns>JSON</returns>
        </member>
        <member name="T:API.Controllers.VideosController">
            <summary>
            Class VideosController.
            Implements video file uploading
            </summary>
        </member>
        <member name="M:API.Controllers.VideosController.#ctor(Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Constructor
            </summary>
            <param name="env">env</param>
        </member>
        <member name="M:API.Controllers.VideosController.UploadVideo(Microsoft.AspNetCore.Http.IFormFile)">
            <summary>
            Method handles file uploading
            POST: /api/videos/{file}
            </summary>
            <param name="video"></param>
            <returns></returns>
        </member>
        <member name="M:API.Controllers.VideosController.GetVideo(System.String)">
            <summary>
            Method streams the video file
            GET: /api/videos/{video}
            </summary>
            <param name="video">video</param>
            <returns>File</returns>
        </member>
        <member name="T:API.Extensions.ApplicationServiceExtensions">
            <summary>
            Class ApplicationServiceExtensions
            Implements service support
            </summary>
        </member>
        <member name="M:API.Extensions.ApplicationServiceExtensions.AddApplicationServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Method adds applications services
            </summary>
            <param name="services">services</param>
            <param name="configuration">configuration</param>
            <returns>IServiceCollection</returns>
        </member>
        <member name="T:API.Middleware.ErrorHandlingMiddleware">
            <summary>
            Class ErrorHandlingMiddleware.
            Implements middleware to handle exceptions
            </summary>
        </member>
        <member name="F:API.Middleware.ErrorHandlingMiddleware._next">
            <summary>
            RequestDelegate
            </summary>
        </member>
        <member name="F:API.Middleware.ErrorHandlingMiddleware._logger">
            <summary>
            ILogger
            </summary>
        </member>
        <member name="M:API.Middleware.ErrorHandlingMiddleware.#ctor(Microsoft.AspNetCore.Http.RequestDelegate,Microsoft.Extensions.Logging.ILogger{API.Middleware.ErrorHandlingMiddleware})">
            <summary>
            Constructor
            </summary>
            <param name="next">next</param>
            <param name="logger">logger</param>
        </member>
        <member name="M:API.Middleware.ErrorHandlingMiddleware.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            Invoke
            </summary>
            <param name="context">context</param>
            <returns>Task</returns>
        </member>
        <member name="M:API.Middleware.ErrorHandlingMiddleware.HandleExceptionAsync(Microsoft.AspNetCore.Http.HttpContext,System.Exception,Microsoft.Extensions.Logging.ILogger{API.Middleware.ErrorHandlingMiddleware})">
            <summary>
            HandleExceptionAsync
            </summary>
            <param name="context">context</param>
            <param name="ex">exception</param>
            <param name="logger">logger</param>
            <returns>Task</returns>
        </member>
        <member name="T:API.Program">
            <summary>
            Class Program.
            Implements the main app class
            </summary>
        </member>
        <member name="M:API.Program.Main(System.String[])">
            <summary>
            App entry point
            </summary>
            <param name="args">args</param>
            <returns>Task</returns>
        </member>
        <member name="M:API.Program.CreateHostBuilder(System.String[])">
            <summary>
            Method bootstraps the app
            </summary>
            <param name="args">args</param>
            <returns>IHostBuilder</returns>
        </member>
        <member name="T:API.Startup">
            <summary>
            Class Startup.
            Implements initial settings
            </summary>
        </member>
        <member name="F:API.Startup._configuration">
            <summary>
            Configuration
            </summary>
        </member>
        <member name="F:API.Startup._env">
            <summary>
            
            </summary>
        </member>
        <member name="M:API.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            Constructor
            </summary>
            <param name="configuration">configuration</param>
            <param name="env">env</param>
        </member>
        <member name="M:API.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Method gets called by the runtime to add services to the container
            </summary>
            <param name="services">services</param>
        </member>
        <member name="M:API.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.Extensions.Logging.ILogger{API.Startup})">
            <summary>
            Method gets called by the runtime to configure the HTTP request pipeline
            </summary>
            <param name="app">app</param>
            <param name="logger">logger</param>
        </member>
    </members>
</doc>
